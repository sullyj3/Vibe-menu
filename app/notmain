{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE BlockArguments #-}

module Main where

import qualified Data.Text as T
import           Data.Text (Text)

import Brick
import Graphics.Vty.Attributes (defAttr)
import Graphics.Vty.Input.Events
import Brick.Widgets.Edit
import Buttplug

data WebSocketScreenFocus = WssHost | WssPort

data AppState =
  WebSocketScreen { wssHost :: Editor Text Text
                  , wssPort :: Editor Text Text
                  , wssFocussed :: WebSocketScreenFocus }

toggleFocussed WssHost = WssPort
toggleFocussed WssPort = WssHost

app :: App AppState () Text
app =
  App { appDraw = ui
      , appChooseCursor = (\state cls -> Nothing)
      , appHandleEvent = handleEvent
      , appStartEvent = (\state -> pure state)
      , appAttrMap = (\state -> attrMap defAttr [])
      }

handleEvent :: AppState -> BrickEvent Text e -> EventM Text (Next AppState)
handleEvent state@(WebSocketScreen {..}) = \case
  VtyEvent (EvKey (KChar 'q') [MCtrl]) -> halt state
  VtyEvent (EvKey (KChar '\t') []) -> do
    continue $ state { wssFocussed = toggleFocussed wssFocussed }
  VtyEvent ev -> do

    state' <- case wssFocussed of
      WssHost -> do
        wssHost' <- handleEditorEvent ev wssHost
        pure $ state { wssHost = wssHost' }

      WssPort -> do
        wssPort' <- handleEditorEvent ev wssPort
        pure $ state { wssHost = wssPort' }
    continue state
  ev -> continue state

initialState = WebSocketScreen
  (editorText "wssHost" (Just 1) "")
  (editorText "wssPort" (Just 1) "")
  WssHost

ui :: AppState -> [Widget Text]
ui = \case
  WebSocketScreen hostEditor portEditor focussed -> (:[]) $
    str "Connect via websockets" <=>
    (str "Host: " <+> myTextBox hostEditor (hostFocussed focussed)) <=>
    (str "Port: " <+> myTextBox portEditor (not $ hostFocussed focussed))

  where
    hostFocussed WssHost = True
    hostFocussed WssPort = False

myTextBox :: Editor Text Text -> Bool -> Widget Text
myTextBox ed hasFocus = renderEditor
  (\lines -> txt (head lines)) -- ???
  hasFocus
  ed

main :: IO ()
main = do
  defaultMain app initialState
  pure ()
